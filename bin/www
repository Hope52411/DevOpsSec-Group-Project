#!/usr/bin/env node

//import modules
var app = require('../app'); 
var debug = require('debug')('phishsense:server'); 
var http = require('http'); 


function normalizePort(val) { 
  var port = parseInt(val, 10); 

  if (isNaN(port)) { //return value if port is not a number 
    return val; 
  } else if (port >= 0) { //return port if port is greater than 0
    return port; 
  }else { 
    return false; 
  } 
} 

function onError(error) { // Event listener for HTTP server error
  if (error.syscall !== 'listen') { //throw error if error is not a listen error
    throw error; 
  } 
  var bind;
  if (typeof port === 'string') {//check if port is a string
    bind = 'Pipe ' + port;//set bind to pipe
  } else {
    bind = 'Port ' + port;//set bind to port
  }
 
  switch (error.code) { // switch case for error code ecces and addrinuse
    case 'EACCES': 
      console.error(bind + ' requires elevated privileges'); 
      process.exit(1); 
      break; 
    case 'EADDRINUSE': 
      console.error(bind + ' is already in use'); 
      process.exit(1); 
      break; 
    default: 
      throw error; 
  } 
} 

function onListening() {// Event listener for HTTP server "listening" 
  var address = server.address();//get address of server

  let bind;
  if (typeof address === 'string') {//check if address is a string
    bind = 'pipe ' + address; //
  } else {
    bind = 'port ' + address.port; //set bind to port
  }
  debug('Listening on ' + bind); // print listening on bind
}


// ======================================== HTTPS =========================================

var fs = require('fs'); // file system
var https = require('https'); // https module
var port = normalizePort(process.env.PORT || '8080'); 
var https_port = process.env.PORT_HTTPS || 8443;  
var options = {}; 

if(process.env.ENV !== "DEV") { 
  var privatekey = fs.readFileSync('privatekey.pem', "utf8"); //  read private key and assign to privatekey variable
  var cert = fs.readFileSync('server.crt', "utf8"); // read server certificate and assign to cert variable

  var options = {   // set options array with private key and certificate for https
    key  : privatekey, 
    cert : cert 
  }; 

  app.set("port",https_port); //  set port to https port
  var server = https.createServer(options, app).listen(https_port, function () {  // create https server
    console.log('connected to port ' + https_port);  
  }); 

  server.on('error', onError); 
  server.on('listening', onListening); 

  
  http.createServer(function (req, res) { // create http server
    res.writeHead(301, { "Location": "https://" + req.headers['host'].replace(port,https_port) + req.url }); // redirect http to https server
    res.end(); 
  }).listen(port); 
} else { // if not in production environment
  var server = http.createServer(app); // create http server

  server.listen(port); 
  server.on('error', onError); // Event listener for HTTP server error
  server.on('listening', onListening); // Event listener for HTTP server "listening"
} 
